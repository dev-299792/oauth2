package com.example.authserver.entity;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.util.StringUtils;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Set;


/**
 * AuthorizationCode entity. Represents an authorization code which is used to request an access token.
 * The authorization code is generated by the authorization server and is used by the client to request an access token.
 *
 */
@Entity
@Table(name = "authorization_code")
@Setter
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class AuthorizationCode {

    @Id
    @Column(length = 255)
    private String code;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "client_id", nullable = false, foreignKey = @ForeignKey(name = "fk_client_id"))
    private Client client;

    @Column(nullable = false, length = 100)
    private String user_id;

    @Column(name = "redirect_uri", length = 255)
    private String redirectUri;

    @Column(length = 255)
    private String scopes;

    @Column(length = 255)
    private String codeChallenge;

    @Column(length = 15)
    private String codeChallengeMethod;

    @Column(name = "expires_at", nullable = false)
    private LocalDateTime expiresAt;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;


    /**
     * Initializes the creation and expiration time of the authorization code
     * before persisting code to database.
     */
    @PrePersist
    public void prePersist() {
        if (createdAt == null) {
            createdAt = LocalDateTime.now();
        }
        expiresAt = createdAt.plusMinutes(5);
    }

    public Set<String> getScopesSet() {
        return stringToSet(this.scopes);
    }

    private Set<String> stringToSet(String delimitedString) {
        String[] stringArray = StringUtils.delimitedListToStringArray(delimitedString," ");
        return Set.of(stringArray);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AuthorizationCode authorizationCode = (AuthorizationCode) o;
        return Objects.equals(code, authorizationCode.code);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code);
    }
}

